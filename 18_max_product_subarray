class Solution {
public:
/*
brute: extract each subarray and find max product TC O(n^3) SC O(1)
better: TC O(n^2) SC O(1)

*/

    int maxProduct(vector<int>& nums) {
        /*int n=nums.size();
        int maxi=INT_MIN;
        int pro=1;
        for(int i=0;i<n;i++){
            pro*=nums[i];
            if(pro>maxi) maxi=pro;
            if(pro==0) pro=1;
        }
        return maxi;*/
        /*int maxi=INT_MIN;
        int pro;
        for(int i=0;i<nums.size();i++){
            pro=1;
            for(int j=i;j<nums.size();j++){
                pro*=nums[j];
                maxi=max(pro,maxi);
            }
            
        }
        return maxi;*/


/*
optimal: observation. observe the negative numbers and zeros. TC O(n) SC O(1)
*/        
        int maxi=INT_MIN;
        int prefix=1,suffix=1;
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(prefix==0) prefix=1;
            if(suffix==0) suffix=1;
            prefix*=nums[i];
            suffix*=nums[n-i-1];
            maxi=max(maxi,max(suffix,prefix));
        }
        return maxi;
    }
};
